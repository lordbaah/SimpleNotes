import { useState, useEffect } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { NoteFormSchema, type NoteFormData } from '../schema/noteSchema';
import { useNote } from '../hooks/queries/useNotes';
import { useUpdateNote } from '../hooks/mutations/useNotes';

const ViewNote = ({ NoteId }: { NoteId: string }) => {
  const [isEditing, setIsEditing] = useState(false);

  //fetch note by id
  const { data: note, isLoading } = useNote(NoteId);

  const {
    register,
    handleSubmit,
    reset,
    watch,
    formState: { errors },
  } = useForm<NoteFormData>({
    resolver: zodResolver(NoteFormSchema),
    defaultValues: { title: '', body: '' },
  });

  // Reset form values when note data is loaded
  useEffect(() => {
    if (note?.note) {
      reset({
        title: note.note.title,
        body: note.note.body,
      });
    }
  }, [note, reset]);

  const {
    mutate: updateNote,
    isPending,
    isSuccess,
    isError,
    error,
  } = useUpdateNote(NoteId);

  const handleNoteUpdate = async (data: NoteFormData) => {
    updateNote(data);
    setIsEditing(false);
    console.log(`Updating note ${NoteId} with data:`, data);
  };

  const onChange = async (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const currentTitle = watch('title');
    const currentBody = watch('body');

    console.log({
      title: currentTitle,
      body: currentBody,
    });
    console.log(e.target.value);
    updateNote({
      title: currentTitle,
      body: currentBody,
    });
  };

  if (isLoading) return <p>Loading...</p>;

  return (
    <div>
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-light text-gray-900">
          {isEditing ? 'Edit Note' : 'View Note'}
        </h1>
        <button
          onClick={() => setIsEditing(!isEditing)}
          className="px-4 py-2 bg-gray-900 text-white rounded hover:bg-gray-800 transition-colors"
        >
          {isEditing ? 'Cancel' : 'Edit Note'}
        </button>
      </div>

      <div className="w-full">
        <form onSubmit={handleSubmit(handleNoteUpdate)}>
          <div>
            <label
              htmlFor="title"
              className="block text-sm font-medium text-gray-700 mb-2"
            >
              Title
            </label>
            <input
              className="w-full px-0 py-4 text-xl font-medium bg-transparent border-0 border-b-2 border-gray-200 focus:outline-none focus:border-gray-900 placeholder-gray-400 transition-colors"
              placeholder="Note title"
              disabled={!isEditing}
              {...register('title', { onChange: onChange })}
            />
            <p className="text-red-500">{errors.title?.message}</p>
          </div>

          <div>
            <label
              htmlFor="body"
              className="block text-sm font-medium text-gray-700 mb-2 mt-2"
            >
              Body
            </label>
            <textarea
              rows={8}
              placeholder="Start writing..."
              disabled={!isEditing}
              className="w-full px-0 py-4 text-base bg-transparent border-0 focus:outline-none placeholder-gray-400 resize-none leading-relaxed"
              {...register('body', { onChange: onChange })}
            />
            <p className="text-red-500">{errors.body?.message}</p>
          </div>

          {isEditing && (
            <button
              type="submit"
              className="px-8 py-3 bg-gray-900 text-white font-medium rounded-full hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-gray-900 focus:ring-offset-2 transition-all duration-200"
            >
              Save Note
            </button>
          )}
        </form>
      </div>
    </div>
  );
};

export default ViewNote;
